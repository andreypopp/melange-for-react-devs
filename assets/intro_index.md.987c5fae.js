import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.0e8ae64e.js";const m=JSON.parse('{"title":"Melange for React Developers","description":"","frontmatter":{},"headers":[],"relativePath":"intro/index.md","filePath":"intro/index.md"}'),r={name:"intro/index.md"},n=o('<h1 id="melange-for-react-developers" tabindex="-1">Melange for React Developers <a class="header-anchor" href="#melange-for-react-developers" aria-label="Permalink to &quot;Melange for React Developers&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is a work in progress.</p></div><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>This is a project-based, guided introduction to Melange and its ecosystem. Because Melange uses both OCaml and JavaScript ecosystems, there are quite a few tools and concepts to learn. Therefore we try to make each chapter small and digestible, not introducing too many things at once.</p><h2 id="audience" tabindex="-1">Audience <a class="header-anchor" href="#audience" aria-label="Permalink to &quot;Audience&quot;">​</a></h2><p>You should already know how to make frontend applications in JavaScript, in particular with <a href="https://react.dev/" target="_blank" rel="noreferrer">React</a>. You should be interested in learning how to leverage your existing knowledge to build apps using <a href="https://reasonml.github.io/reason-react/" target="_blank" rel="noreferrer">ReasonReact</a>. You do not need to know OCaml<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>—we’ll slowly introduce the basics of the language throughout the tutorial. That said, a good complement to this guide is <a href="https://cs3110.github.io/textbook/" target="_blank" rel="noreferrer">OCaml Programming: Correct + Efficient + Beautiful</a>, which teaches the language from the ground up and goes much deeper into its features.</p><h2 id="chapters-and-topics" tabindex="-1">Chapters and topics <a class="header-anchor" href="#chapters-and-topics" aria-label="Permalink to &quot;Chapters and topics&quot;">​</a></h2><table><thead><tr><th>Title</th><th>Summary</th><th>Topics covered</th></tr></thead><tbody><tr><td>Counter</td><td>Number that can be incremented or decremented</td><td>module, Option, pipe last operator, function chaining, switch</td></tr><tr><td>Melange Playground</td><td>Use Melange Playground to explore OCaml’s numeric types</td><td>Playground, Int, Float</td></tr><tr><td>Celsius Converter</td><td>Single input that converts from Celsius to Fahrenheit</td><td>polymorphic object, exception handling, ternary expression, if-else expression, labeled argument, partial application</td></tr><tr><td>Celsius Converter using Option</td><td>The same component from the last chapter but replacing exception handling with Option</td><td>Option, Option.map, when guard</td></tr></tbody></table><p>…and much more to come!</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Because of the focus on ReasonReact, we won’t cover traditional OCaml syntax in this guide. Instead, we’ll cover the <a href="https://reasonml.github.io/" target="_blank" rel="noreferrer">Reason syntax</a> which works great with ReasonReact because of its first-class support for JSX. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',11),i=[n];function s(l,c,d,h,p,u){return t(),a("div",null,i)}const g=e(r,[["render",s]]);export{m as __pageData,g as default};
